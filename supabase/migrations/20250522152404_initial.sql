CREATE EXTENSION IF NOT EXISTS "moddatetime" WITH SCHEMA "extensions";

CREATE TYPE "public"."contract_type" AS enum(
  'renting',
  'lending'
);

CREATE TYPE "public"."fraction_type" AS enum(
  'apartment',
  'store',
  'garage',
  'house',
  'terrain'
);

CREATE TYPE "public"."gender" AS enum(
  'male',
  'female',
  'other'
);

CREATE TYPE "public"."intervention_status" AS enum(
  'not_started',
  'in_progress',
  'completed',
  'cancelled'
);

CREATE TYPE "public"."intervention_type" AS enum(
  'new',
  'renovation',
  'maintenance'
);

CREATE TYPE "public"."marital_status" AS enum(
  'single',
  'married',
  'union',
  'divorced',
  'widowed'
);

CREATE TYPE "public"."movement_type" AS enum(
  'rent',
  'installment_amortization',
  'installment_interest',
  'intervention',
  'other'
);

CREATE TYPE "public"."property_class" AS enum(
  'urban',
  'rustic'
);

CREATE TYPE "public"."property_type" AS enum(
  'building',
  'terrain',
  'house',
  'garages'
);

CREATE TYPE "public"."salary_type" AS enum(
  'hourly',
  'monthly'
);

CREATE TYPE "public"."ticket_priority" AS enum(
  'low',
  'medium',
  'high'
);

CREATE TYPE "public"."ticket_status" AS enum(
  'open',
  'in_progress',
  'resolved',
  'cancelled'
);

CREATE TABLE "public"."contracts"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "updated_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "type" contract_type NOT NULL,
  "start_date" timestamp with time zone NOT NULL,
  "end_date" timestamp with time zone,
  "fraction_id" bigint NOT NULL,
  "is_active" boolean NOT NULL DEFAULT TRUE
);

CREATE TABLE "public"."contracts_tenants"(
  "contract_id" bigint NOT NULL,
  "tenant_id" bigint NOT NULL
);

CREATE TABLE "public"."due_notes"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "contract_id" bigint NOT NULL,
  "due_date" timestamp with time zone NOT NULL,
  "value" double precision NOT NULL
);

CREATE TABLE "public"."employees"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "name" text NOT NULL,
  "gender" gender NOT NULL,
  "marital_status" marital_status NOT NULL,
  "nationality" text NOT NULL,
  "birth_date" timestamp with time zone,
  "id_type" text NOT NULL,
  "id_expiration_date" timestamp with time zone,
  "id_number" text NOT NULL,
  "tax_id_number" text NOT NULL,
  "ss_number" text NOT NULL,
  "country" text,
  "region" text,
  "address" text,
  "postal_code" text,
  "city" text,
  "email" text,
  "mobile" text,
  "phone" text,
  "position" text NOT NULL,
  "salary_type" salary_type NOT NULL,
  "salary" double precision NOT NULL
);

CREATE TABLE "public"."fractions"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "type" fraction_type NOT NULL,
  "matrix" text NOT NULL,
  "area" double precision,
  "tipology" text,
  "description" text,
  "patrimonial_value" double precision,
  "market_value" double precision,
  "address" text NOT NULL,
  "sold" boolean NOT NULL DEFAULT FALSE,
  "property_id" bigint NOT NULL
);

CREATE TABLE "public"."installment_payments"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "contract_id" bigint NOT NULL,
  "interest_movement_id" bigint NOT NULL,
  "amortization_movement_id" bigint,
  "extra_debt" double precision
);

CREATE TABLE "public"."installment_updates"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "update_date" timestamp with time zone NOT NULL,
  "installment" double precision NOT NULL,
  "interest" double precision NOT NULL,
  "contract_id" bigint NOT NULL
);

CREATE TABLE "public"."intervention_payments"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "intervention_id" bigint NOT NULL,
  "movement_id" bigint NOT NULL
);

CREATE TABLE "public"."interventions"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "type" intervention_type NOT NULL,
  "status" intervention_status NOT NULL,
  "start_date" timestamp with time zone,
  "end_date" timestamp with time zone,
  "description" text NOT NULL,
  "property_id" bigint NOT NULL,
  "fraction_id" bigint,
  "ticket_id" bigint
);

CREATE TABLE "public"."lending_contracts"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "contract_type" contract_type NOT NULL GENERATED ALWAYS AS ('lending'::contract_type) STORED,
  "sale_value" double precision NOT NULL,
  "down_payment" double precision NOT NULL,
  "yearly_raise" double precision NOT NULL
);

CREATE TABLE "public"."movements"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "type" movement_type NOT NULL,
  "date" timestamp with time zone NOT NULL,
  "value" double precision NOT NULL,
  "tax_id_number" text,
  "description" text
);

CREATE TABLE "public"."profiles"(
  "id" uuid NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "email" text NOT NULL,
  "display_name" text NOT NULL,
  "image" text
);

CREATE TABLE "public"."properties"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "class" property_class NOT NULL,
  "type" property_type NOT NULL,
  "is_multi_unit" boolean NOT NULL,
  "matrix" text NOT NULL,
  "conservatory" text NOT NULL,
  "area" double precision,
  "tipology" text,
  "description" text,
  "patrimonial_value" double precision,
  "market_value" double precision,
  "country" text NOT NULL,
  "region" text NOT NULL,
  "address" text NOT NULL,
  "postal_code" text NOT NULL,
  "city" text NOT NULL,
  "sold" boolean NOT NULL DEFAULT FALSE
);

CREATE TABLE "public"."rent_payments"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "contract_id" bigint NOT NULL,
  "movement_id" bigint NOT NULL
);

CREATE TABLE "public"."rent_updates"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "update_date" timestamp with time zone NOT NULL,
  "rent" double precision NOT NULL,
  "contract_id" bigint NOT NULL
);

CREATE TABLE "public"."renting_contracts"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "contract_type" contract_type NOT NULL GENERATED ALWAYS AS ('renting'::contract_type) STORED
);

CREATE TABLE "public"."tenants"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "name" text NOT NULL,
  "gender" gender NOT NULL,
  "marital_status" marital_status NOT NULL,
  "nationality" text NOT NULL,
  "birth_date" timestamp with time zone,
  "id_type" text NOT NULL,
  "id_expiration_date" timestamp with time zone,
  "id_number" text NOT NULL,
  "tax_id_number" text NOT NULL,
  "country" text,
  "region" text,
  "address" text,
  "postal_code" text,
  "city" text,
  "email" text,
  "mobile" text,
  "phone" text
);

CREATE TABLE "public"."tickets"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "date" timestamp with time zone NOT NULL,
  "priority" ticket_priority NOT NULL,
  "status" ticket_status NOT NULL,
  "title" text NOT NULL,
  "description" text NOT NULL,
  "property_id" bigint NOT NULL,
  "fraction_id" bigint
);

CREATE TABLE "public"."vendors"(
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "inserted_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  "name" text NOT NULL,
  "tax_id_number" text NOT NULL,
  "description" text,
  "tags" text[] NOT NULL DEFAULT '{}' ::text[],
  "country" text,
  "region" text,
  "address" text,
  "postal_code" text,
  "city" text,
  "email" text,
  "mobile" text,
  "phone" text,
  "website" text
);

CREATE UNIQUE INDEX contracts_fraction_id_is_active_key ON public.contracts USING btree(fraction_id, is_active);

CREATE UNIQUE INDEX contracts_id_type_key ON public.contracts USING btree(id, type);

CREATE UNIQUE INDEX contracts_pkey ON public.contracts USING btree(id);

CREATE UNIQUE INDEX contracts_tenants_pkey ON public.contracts_tenants USING btree(contract_id, tenant_id);

CREATE UNIQUE INDEX due_notes_pkey ON public.due_notes USING btree(id);

CREATE UNIQUE INDEX employees_pkey ON public.employees USING btree(id);

CREATE UNIQUE INDEX fractions_pkey ON public.fractions USING btree(id);

CREATE UNIQUE INDEX installment_payments_pkey ON public.installment_payments USING btree(id);

CREATE UNIQUE INDEX installment_updates_pkey ON public.installment_updates USING btree(id);

CREATE UNIQUE INDEX intervention_payments_pkey ON public.intervention_payments USING btree(id);

CREATE UNIQUE INDEX interventions_pkey ON public.interventions USING btree(id);

CREATE UNIQUE INDEX lending_contracts_pkey ON public.lending_contracts USING btree(id);

CREATE UNIQUE INDEX movements_pkey ON public.movements USING btree(id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree(id);

CREATE UNIQUE INDEX properties_pkey ON public.properties USING btree(id);

CREATE UNIQUE INDEX rent_payments_pkey ON public.rent_payments USING btree(id);

CREATE UNIQUE INDEX rent_updates_pkey ON public.rent_updates USING btree(id);

CREATE UNIQUE INDEX renting_contracts_pkey ON public.renting_contracts USING btree(id);

CREATE UNIQUE INDEX tenants_pkey ON public.tenants USING btree(id);

CREATE UNIQUE INDEX tickets_pkey ON public.tickets USING btree(id);

CREATE UNIQUE INDEX vendors_pkey ON public.vendors USING btree(id);

ALTER TABLE "public"."contracts"
  ADD CONSTRAINT "contracts_pkey" PRIMARY KEY USING INDEX "contracts_pkey";

ALTER TABLE "public"."contracts_tenants"
  ADD CONSTRAINT "contracts_tenants_pkey" PRIMARY KEY USING INDEX "contracts_tenants_pkey";

ALTER TABLE "public"."due_notes"
  ADD CONSTRAINT "due_notes_pkey" PRIMARY KEY USING INDEX "due_notes_pkey";

ALTER TABLE "public"."employees"
  ADD CONSTRAINT "employees_pkey" PRIMARY KEY USING INDEX "employees_pkey";

ALTER TABLE "public"."fractions"
  ADD CONSTRAINT "fractions_pkey" PRIMARY KEY USING INDEX "fractions_pkey";

ALTER TABLE "public"."installment_payments"
  ADD CONSTRAINT "installment_payments_pkey" PRIMARY KEY USING INDEX "installment_payments_pkey";

ALTER TABLE "public"."installment_updates"
  ADD CONSTRAINT "installment_updates_pkey" PRIMARY KEY USING INDEX "installment_updates_pkey";

ALTER TABLE "public"."intervention_payments"
  ADD CONSTRAINT "intervention_payments_pkey" PRIMARY KEY USING INDEX "intervention_payments_pkey";

ALTER TABLE "public"."interventions"
  ADD CONSTRAINT "interventions_pkey" PRIMARY KEY USING INDEX "interventions_pkey";

ALTER TABLE "public"."lending_contracts"
  ADD CONSTRAINT "lending_contracts_pkey" PRIMARY KEY USING INDEX "lending_contracts_pkey";

ALTER TABLE "public"."movements"
  ADD CONSTRAINT "movements_pkey" PRIMARY KEY USING INDEX "movements_pkey";

ALTER TABLE "public"."profiles"
  ADD CONSTRAINT "profiles_pkey" PRIMARY KEY USING INDEX "profiles_pkey";

ALTER TABLE "public"."properties"
  ADD CONSTRAINT "properties_pkey" PRIMARY KEY USING INDEX "properties_pkey";

ALTER TABLE "public"."rent_payments"
  ADD CONSTRAINT "rent_payments_pkey" PRIMARY KEY USING INDEX "rent_payments_pkey";

ALTER TABLE "public"."rent_updates"
  ADD CONSTRAINT "rent_updates_pkey" PRIMARY KEY USING INDEX "rent_updates_pkey";

ALTER TABLE "public"."renting_contracts"
  ADD CONSTRAINT "renting_contracts_pkey" PRIMARY KEY USING INDEX "renting_contracts_pkey";

ALTER TABLE "public"."tenants"
  ADD CONSTRAINT "tenants_pkey" PRIMARY KEY USING INDEX "tenants_pkey";

ALTER TABLE "public"."tickets"
  ADD CONSTRAINT "tickets_pkey" PRIMARY KEY USING INDEX "tickets_pkey";

ALTER TABLE "public"."vendors"
  ADD CONSTRAINT "vendors_pkey" PRIMARY KEY USING INDEX "vendors_pkey";

ALTER TABLE "public"."contracts"
  ADD CONSTRAINT "contracts_fraction_id_fkey" FOREIGN KEY (fraction_id) REFERENCES fractions(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."contracts" validate CONSTRAINT "contracts_fraction_id_fkey";

ALTER TABLE "public"."contracts"
  ADD CONSTRAINT "contracts_fraction_id_is_active_key" UNIQUE USING INDEX "contracts_fraction_id_is_active_key";

ALTER TABLE "public"."contracts"
  ADD CONSTRAINT "contracts_id_type_key" UNIQUE USING INDEX "contracts_id_type_key";

ALTER TABLE "public"."contracts_tenants"
  ADD CONSTRAINT "contracts_tenants_contract_id_fkey" FOREIGN KEY (contract_id) REFERENCES contracts(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."contracts_tenants" validate CONSTRAINT "contracts_tenants_contract_id_fkey";

ALTER TABLE "public"."contracts_tenants"
  ADD CONSTRAINT "contracts_tenants_tenant_id_fkey" FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."contracts_tenants" validate CONSTRAINT "contracts_tenants_tenant_id_fkey";

ALTER TABLE "public"."due_notes"
  ADD CONSTRAINT "due_notes_contract_id_fkey" FOREIGN KEY (contract_id) REFERENCES contracts(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."due_notes" validate CONSTRAINT "due_notes_contract_id_fkey";

ALTER TABLE "public"."fractions"
  ADD CONSTRAINT "fractions_property_id_fkey" FOREIGN KEY (property_id) REFERENCES properties(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."fractions" validate CONSTRAINT "fractions_property_id_fkey";

ALTER TABLE "public"."installment_payments"
  ADD CONSTRAINT "installment_payments_amortization_movement_id_fkey" FOREIGN KEY (amortization_movement_id) REFERENCES movements(id) NOT valid;

ALTER TABLE "public"."installment_payments" validate CONSTRAINT "installment_payments_amortization_movement_id_fkey";

ALTER TABLE "public"."installment_payments"
  ADD CONSTRAINT "installment_payments_contract_id_fkey" FOREIGN KEY (contract_id) REFERENCES lending_contracts(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."installment_payments" validate CONSTRAINT "installment_payments_contract_id_fkey";

ALTER TABLE "public"."installment_payments"
  ADD CONSTRAINT "installment_payments_interest_movement_id_fkey" FOREIGN KEY (interest_movement_id) REFERENCES movements(id) NOT valid;

ALTER TABLE "public"."installment_payments" validate CONSTRAINT "installment_payments_interest_movement_id_fkey";

ALTER TABLE "public"."installment_updates"
  ADD CONSTRAINT "installment_updates_contract_id_fkey" FOREIGN KEY (contract_id) REFERENCES lending_contracts(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."installment_updates" validate CONSTRAINT "installment_updates_contract_id_fkey";

ALTER TABLE "public"."intervention_payments"
  ADD CONSTRAINT "intervention_payments_intervention_id_fkey" FOREIGN KEY (intervention_id) REFERENCES interventions(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."intervention_payments" validate CONSTRAINT "intervention_payments_intervention_id_fkey";

ALTER TABLE "public"."intervention_payments"
  ADD CONSTRAINT "intervention_payments_movement_id_fkey" FOREIGN KEY (movement_id) REFERENCES movements(id) NOT valid;

ALTER TABLE "public"."intervention_payments" validate CONSTRAINT "intervention_payments_movement_id_fkey";

ALTER TABLE "public"."interventions"
  ADD CONSTRAINT "interventions_fraction_id_fkey" FOREIGN KEY (fraction_id) REFERENCES fractions(id) NOT valid;

ALTER TABLE "public"."interventions" validate CONSTRAINT "interventions_fraction_id_fkey";

ALTER TABLE "public"."interventions"
  ADD CONSTRAINT "interventions_property_id_fkey" FOREIGN KEY (property_id) REFERENCES properties(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."interventions" validate CONSTRAINT "interventions_property_id_fkey";

ALTER TABLE "public"."interventions"
  ADD CONSTRAINT "interventions_ticket_id_fkey" FOREIGN KEY (ticket_id) REFERENCES tickets(id) NOT valid;

ALTER TABLE "public"."interventions" validate CONSTRAINT "interventions_ticket_id_fkey";

ALTER TABLE "public"."lending_contracts"
  ADD CONSTRAINT "lending_contracts_id_contract_type_fkey" FOREIGN KEY (id, contract_type) REFERENCES contracts(id, type) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."lending_contracts" validate CONSTRAINT "lending_contracts_id_contract_type_fkey";

ALTER TABLE "public"."profiles"
  ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) NOT valid;

ALTER TABLE "public"."profiles" validate CONSTRAINT "profiles_id_fkey";

ALTER TABLE "public"."rent_payments"
  ADD CONSTRAINT "rent_payments_contract_id_fkey" FOREIGN KEY (contract_id) REFERENCES renting_contracts(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."rent_payments" validate CONSTRAINT "rent_payments_contract_id_fkey";

ALTER TABLE "public"."rent_payments"
  ADD CONSTRAINT "rent_payments_movement_id_fkey" FOREIGN KEY (movement_id) REFERENCES movements(id) NOT valid;

ALTER TABLE "public"."rent_payments" validate CONSTRAINT "rent_payments_movement_id_fkey";

ALTER TABLE "public"."rent_updates"
  ADD CONSTRAINT "rent_updates_contract_id_fkey" FOREIGN KEY (contract_id) REFERENCES renting_contracts(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."rent_updates" validate CONSTRAINT "rent_updates_contract_id_fkey";

ALTER TABLE "public"."renting_contracts"
  ADD CONSTRAINT "renting_contracts_id_contract_type_fkey" FOREIGN KEY (id, contract_type) REFERENCES contracts(id, type) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."renting_contracts" validate CONSTRAINT "renting_contracts_id_contract_type_fkey";

ALTER TABLE "public"."tickets"
  ADD CONSTRAINT "tickets_fraction_id_fkey" FOREIGN KEY (fraction_id) REFERENCES fractions(id) NOT valid;

ALTER TABLE "public"."tickets" validate CONSTRAINT "tickets_fraction_id_fkey";

ALTER TABLE "public"."tickets"
  ADD CONSTRAINT "tickets_property_id_fkey" FOREIGN KEY (property_id) REFERENCES properties(id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."tickets" validate CONSTRAINT "tickets_property_id_fkey";

SET check_function_bodies = OFF;

CREATE OR REPLACE VIEW "public"."fractions_view" AS
SELECT
  f.id,
  f.inserted_at,
  f.type,
  f.matrix,
  f.area,
  f.tipology,
  f.description,
  f.patrimonial_value,
  f.market_value,
  f.address,
  f.sold,
  f.property_id,
  p.country,
  p.region,
((p.address || ' '::text) || f.address) AS address_full,
  p.postal_code,
  p.city
FROM (fractions f
  JOIN properties p ON (f.property_id = p.id));

CREATE OR REPLACE FUNCTION public.handle_new_user()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  SECURITY DEFINER
  SET search_path TO 'public'
  AS $function$
BEGIN
  INSERT INTO public.profiles(id, email, display_name)
    VALUES(NEW.id, NEW.email, NEW.raw_user_meta_data ->> 'display_name');
  RETURN new;
END;
$function$;

CREATE OR REPLACE FUNCTION public.insert_contract()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
DECLARE
  contract_id bigint;
  inserted_contract contracts_view % ROWTYPE;
BEGIN
  INSERT INTO contracts(type, start_date, end_date, fraction_id)
    VALUES (NEW.type, NEW.start_date, NEW.end_date, NEW.fraction_id)
  RETURNING
    id INTO contract_id;
  IF NEW.type = 'renting' THEN
    INSERT INTO renting_contracts(id)
      VALUES (contract_id);
    INSERT INTO rent_updates(contract_id, update_date, rent)
      VALUES (contract_id, NEW.start_date,(NEW.data ->> 'rent')::double precision);
  ELSIF NEW.type = 'lending' THEN
    INSERT INTO lending_contracts(id, sale_value, down_payment, yearly_raise)
      VALUES (contract_id,(NEW.data ->> 'sale_value')::double precision,(NEW.data ->> 'down_payment')::double precision,(NEW.data ->> 'yearly_raise')::double precision);
    INSERT INTO installment_updates(contract_id, update_date, installment, interest)
      VALUES (contract_id, NEW.start_date,(NEW.data ->> 'installment')::double precision,(NEW.data ->> 'interest')::double precision);
  END IF;
  SELECT
    * INTO inserted_contract
  FROM
    contracts_view
  WHERE
    id = contract_id;
  RETURN inserted_contract;
END;
$function$;

CREATE OR REPLACE FUNCTION public.insert_fraction_from_property()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
BEGIN
  IF NOT NEW.is_multi_unit THEN
    INSERT INTO fractions(type, matrix, sold, area, tipology, description, conservatory, patrimonial_value, market_value, address, property_id)
      VALUES(NEW.type::fraction_type, NEW.matrix, NEW.sold, NEW.area, NEW.tipology, NEW.description, NEW.conservatory, NEW.patrimonial_value, NEW.market_value, '', NEW.id);
  END IF;
  RETURN new;
END;
$function$;

CREATE OR REPLACE FUNCTION public.insert_installment_payment()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
DECLARE
  interest_movement_id bigint;
  DECLARE amortization_movement_id bigint;
BEGIN
  INSERT INTO movements(type, value, date, description)
    VALUES ('installment_interest'::movement_type, NEW.interest, NEW.date, NEW.description)
  RETURNING
    id INTO interest_movement_id;
  IF NEW.amortization > 0 THEN
    INSERT INTO movements(type, value, date, description)
      VALUES ('installment_amortization'::movement_type, NEW.amortization, NEW.date, NEW.description)
    RETURNING
      id INTO amortization_movement_id;
  END IF;
  INSERT INTO installment_payments(contract_id, interest_movement_id, amortization_movement_id, extra_debt)
    VALUES (NEW.contract_id, interest_movement_id, amortization_movement_id, NEW.extra_debt);
  RETURN new;
END;
$function$;

CREATE OR REPLACE FUNCTION public.insert_intervention_payment()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
DECLARE
  movement_id bigint;
BEGIN
  INSERT INTO movements(type, value, date, description)
    VALUES ('intervention'::movement_type, NEW.value, NEW.date, NEW.description)
  RETURNING
    id INTO movement_id;
  INSERT INTO intervention_payments(intervention, movement_id)
    VALUES (NEW.intervention_id, movement_id);
  RETURN new;
END;
$function$;

CREATE OR REPLACE FUNCTION public.insert_rent_payment()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
DECLARE
  movement_id bigint;
BEGIN
  INSERT INTO movements(type, value, date, description)
    VALUES ('rent'::movement_type, NEW.value, NEW.date, NEW.description)
  RETURNING
    id INTO movement_id;
  INSERT INTO rent_payments(contract_id, movement_id)
    VALUES (NEW.contract_id, movement_id);
  RETURN new;
END;
$function$;

CREATE OR REPLACE VIEW "public"."installment_payments_view" AS
SELECT
  ip.contract_id,
  ip.id,
  i.date,
  i.value AS interest,
  COALESCE(a.value,(0)::double precision) AS amortization,
  ip.extra_debt,
  i.description
FROM ((installment_payments ip
  LEFT JOIN movements a ON (ip.amortization_movement_id = a.id))
  LEFT JOIN movements i ON (ip.interest_movement_id = i.id));

CREATE OR REPLACE VIEW "public"."intervention_payments_view" AS
SELECT
  ip.intervention_id,
  ip.id,
  m.value,
  m.date,
  m.description
FROM (intervention_payments ip
  JOIN movements m ON (ip.movement_id = m.id));

CREATE OR REPLACE VIEW "public"."lending_contracts_debts_view" AS
SELECT
  lc.id,
((lc.sale_value - lc.down_payment) - COALESCE(sum(ip.amortization),(0)::double precision)) AS debt,
  COALESCE((
    SELECT
      ip_1.extra_debt
    FROM installment_payments_view ip_1
    WHERE (ip_1.contract_id = lc.id)
ORDER BY ip_1.date DESC LIMIT 1),(0)::double precision) AS extra_debt,
  max(ip.date) AS last_payment_date
FROM (lending_contracts lc
  LEFT JOIN installment_payments_view ip ON (lc.id = ip.contract_id))
GROUP BY
  lc.id;

CREATE OR REPLACE VIEW "public"."lending_contracts_view" AS
SELECT
  lc.id,
  lc.inserted_at,
  lc.contract_type,
  lc.sale_value,
  lc.down_payment,
  lc.yearly_raise,
  lcd.debt,
  lcd.extra_debt,
  lcd.last_payment_date,
  COALESCE(active_updates.installment,(0)::double precision) AS installment,
  COALESCE(active_updates.interest,(0)::double precision) AS interest,
  CASE WHEN (last_updates.update_date IS NULL) THEN
    NULL::json
  ELSE
    json_build_object('update_date', last_updates.update_date, 'installment', COALESCE(last_updates.installment,(0)::double precision), 'interest', COALESCE(last_updates.interest,(0)::double precision))
  END AS next_update
FROM (((lending_contracts lc
    LEFT JOIN lending_contracts_debts_view lcd ON (lc.id = lcd.id))
  LEFT JOIN ( SELECT DISTINCT ON (iu.contract_id)
      iu.contract_id,
      iu.installment,
      iu.interest,
      iu.update_date
    FROM
      installment_updates iu
    ORDER BY
      iu.contract_id,
      iu.inserted_at DESC) last_updates ON (lc.id = last_updates.contract_id))
  LEFT JOIN ( SELECT DISTINCT ON (iu.contract_id)
      iu.contract_id,
      iu.installment,
      iu.interest,
      iu.update_date
    FROM
      installment_updates iu
    WHERE (iu.update_date <= timezone('utc'::text, now()))
  ORDER BY
    iu.contract_id,
    iu.update_date DESC) active_updates ON (lc.id = active_updates.contract_id));

CREATE OR REPLACE FUNCTION public.remove_installment_payment()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
BEGIN
  DELETE FROM installment_payments
  WHERE id = OLD.id;
  DELETE FROM movements
  WHERE id = OLD.interest_movement_id;
  DELETE FROM movements
  WHERE id = OLD.amortization_movement_id;
  RETURN old;
END;
$function$;

CREATE OR REPLACE FUNCTION public.remove_intervention_payment()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
BEGIN
  DELETE FROM intervention_payments
  WHERE id = OLD.id;
  DELETE FROM movements
  WHERE id = OLD.movement_id;
  RETURN old;
END;
$function$;

CREATE OR REPLACE FUNCTION public.remove_rent_payment()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
BEGIN
  DELETE FROM rent_payments
  WHERE id = OLD.id;
  DELETE FROM movements
  WHERE id = OLD.movement_id;
  RETURN old;
END;
$function$;

CREATE OR REPLACE VIEW "public"."rent_payments_view" AS
SELECT
  rp.contract_id,
  rp.id,
  m.value,
  m.date,
  m.description
FROM (rent_payments rp
  JOIN movements m ON (rp.movement_id = m.id));

CREATE OR REPLACE VIEW "public"."renting_contracts_view" AS
SELECT
  rc.id,
  rc.inserted_at,
  rc.contract_type,
  COALESCE(active_updates.rent,(0)::double precision) AS rent,
  CASE WHEN (next_updates.update_date IS NULL) THEN
    NULL::json
  ELSE
    json_build_object('update_date', next_updates.update_date, 'rent', next_updates.rent)
  END AS next_update
FROM ((renting_contracts rc
  LEFT JOIN ( SELECT DISTINCT ON (ru.contract_id)
      ru.contract_id,
      ru.rent,
      ru.update_date
    FROM
      rent_updates ru
    WHERE (ru.update_date <= timezone('utc'::text, now()))
  ORDER BY
    ru.contract_id,
    ru.update_date DESC) active_updates ON (rc.id = active_updates.contract_id))
  LEFT JOIN ( SELECT DISTINCT ON (ru.contract_id)
      ru.contract_id,
      ru.rent,
      ru.update_date
    FROM
      rent_updates ru
    WHERE (ru.update_date > timezone('utc'::text, now()))
  ORDER BY
    ru.contract_id,
    ru.inserted_at DESC) next_updates ON (rc.id = next_updates.contract_id));

CREATE OR REPLACE FUNCTION public.update_contract()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
DECLARE
  contract_id bigint;
  updated_contract contracts_view % rowtype;
BEGIN
  contract_id := NEW.id;
  UPDATE
    contracts
  SET
    start_date = NEW.start_date,
    end_date = NEW.end_date,
    fraction_id = NEW.fraction_id
  WHERE
    id = contract_id;
  IF NEW.type = 'renting' THEN
    INSERT INTO rent_updates(contract_id, update_date, rent)
      VALUES (contract_id, NEW.start_date,(NEW.data ->> 'rent')::double precision);
  ELSIF NEW.type = 'lending' THEN
    UPDATE
      lending_contracts
    SET
      sale_value =(NEW.data ->> 'sale_value')::double precision,
      down_payment =(NEW.data ->> 'down_payment')::double precision,
      yearly_raise =(NEW.data ->> 'yearly_raise')::double precision
    WHERE
      id = contract_id;
    INSERT INTO installment_updates(contract_id, update_date, installment, interest)
      VALUES (contract_id, NEW.start_date,(NEW.data ->> 'installment')::double precision,(NEW.data ->> 'interest')::double precision);
  END IF;
  SELECT
    * INTO updated_contract
  FROM
    contracts_view
  WHERE
    id = contract_id;
  RETURN updated_contract;
END;
$function$;

CREATE OR REPLACE FUNCTION public.update_contract_tenants(p_contract_id bigint, p_tenants bigint[])
  RETURNS void
  LANGUAGE plpgsql
  AS $function$
BEGIN
  DELETE FROM contracts_tenants
  WHERE contract_id = p_contract_id;
  INSERT INTO contracts_tenants(contract_id, tenant_id)
  SELECT
    p_contract_id,
    unnest(p_tenants);
END;
$function$;

CREATE OR REPLACE FUNCTION public.update_fraction_from_property()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $function$
BEGIN
  IF NOT NEW.is_multi_unit THEN
    UPDATE
      fractions
    SET
      type = NEW.type,
      matrix = NEW.matrix,
      sold = NEW.sold,
      area = NEW.area,
      tipology = NEW.tipology,
      description = NEW.description,
      conservatory = NEW.conservatory,
      patrimonial_value = NEW.patrimonial_value,
      market_value = NEW.market_value,
      address = ''
    WHERE
      property_id = NEW.id;
  END IF;
  RETURN new;
END;
$function$;

CREATE OR REPLACE VIEW "public"."contracts_accounts_view" AS
SELECT
  dn.contract_id,
  dn.id,
  'due_note'::text AS type,
  dn.due_date AS date,
(('-1'::integer)::double precision * dn.value) AS value
FROM
  due_notes dn
UNION
SELECT
  rp.contract_id,
  rp.id,
  'payment'::text AS type,
  rp.date,
  rp.value
FROM
  rent_payments_view rp
UNION
SELECT
  ip.contract_id,
  ip.id,
  'payment'::text AS type,
  ip.date,
(ip.interest + ip.amortization) AS value
FROM
  installment_payments_view ip;

CREATE OR REPLACE VIEW "public"."contracts_balances_view" AS
SELECT
  c.id AS contract_id,
  COALESCE(sum(ca.value),(0)::double precision) AS balance
FROM (contracts c
  LEFT JOIN contracts_accounts_view ca ON (c.id = ca.contract_id))
GROUP BY
  c.id;

CREATE OR REPLACE VIEW "public"."contracts_view" AS
SELECT
  c.id,
  c.inserted_at,
  c.updated_at,
  c.type,
  c.start_date,
  c.end_date,
  c.fraction_id,
  c.is_active,
  cb.balance,
  CASE WHEN (c.type = 'lending'::contract_type) THEN
  (
    SELECT
      to_json(lcv.*) AS to_json
    FROM
      lending_contracts_view lcv
    WHERE (lcv.id = c.id))
  WHEN (c.type = 'renting'::contract_type) THEN
  (
    SELECT
      to_json(rcv.*) AS to_json
    FROM
      renting_contracts_view rcv
    WHERE (rcv.id = c.id))
  ELSE
    NULL::json
  END AS data
FROM (contracts c
  LEFT JOIN contracts_balances_view cb ON (c.id = cb.contract_id));

GRANT DELETE ON TABLE "public"."contracts" TO "anon";

GRANT INSERT ON TABLE "public"."contracts" TO "anon";

GRANT REFERENCES ON TABLE "public"."contracts" TO "anon";

GRANT SELECT ON TABLE "public"."contracts" TO "anon";

GRANT TRIGGER ON TABLE "public"."contracts" TO "anon";

GRANT TRUNCATE ON TABLE "public"."contracts" TO "anon";

GRANT UPDATE ON TABLE "public"."contracts" TO "anon";

GRANT DELETE ON TABLE "public"."contracts" TO "authenticated";

GRANT INSERT ON TABLE "public"."contracts" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."contracts" TO "authenticated";

GRANT SELECT ON TABLE "public"."contracts" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."contracts" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."contracts" TO "authenticated";

GRANT UPDATE ON TABLE "public"."contracts" TO "authenticated";

GRANT DELETE ON TABLE "public"."contracts" TO "service_role";

GRANT INSERT ON TABLE "public"."contracts" TO "service_role";

GRANT REFERENCES ON TABLE "public"."contracts" TO "service_role";

GRANT SELECT ON TABLE "public"."contracts" TO "service_role";

GRANT TRIGGER ON TABLE "public"."contracts" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."contracts" TO "service_role";

GRANT UPDATE ON TABLE "public"."contracts" TO "service_role";

GRANT DELETE ON TABLE "public"."contracts_tenants" TO "anon";

GRANT INSERT ON TABLE "public"."contracts_tenants" TO "anon";

GRANT REFERENCES ON TABLE "public"."contracts_tenants" TO "anon";

GRANT SELECT ON TABLE "public"."contracts_tenants" TO "anon";

GRANT TRIGGER ON TABLE "public"."contracts_tenants" TO "anon";

GRANT TRUNCATE ON TABLE "public"."contracts_tenants" TO "anon";

GRANT UPDATE ON TABLE "public"."contracts_tenants" TO "anon";

GRANT DELETE ON TABLE "public"."contracts_tenants" TO "authenticated";

GRANT INSERT ON TABLE "public"."contracts_tenants" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."contracts_tenants" TO "authenticated";

GRANT SELECT ON TABLE "public"."contracts_tenants" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."contracts_tenants" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."contracts_tenants" TO "authenticated";

GRANT UPDATE ON TABLE "public"."contracts_tenants" TO "authenticated";

GRANT DELETE ON TABLE "public"."contracts_tenants" TO "service_role";

GRANT INSERT ON TABLE "public"."contracts_tenants" TO "service_role";

GRANT REFERENCES ON TABLE "public"."contracts_tenants" TO "service_role";

GRANT SELECT ON TABLE "public"."contracts_tenants" TO "service_role";

GRANT TRIGGER ON TABLE "public"."contracts_tenants" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."contracts_tenants" TO "service_role";

GRANT UPDATE ON TABLE "public"."contracts_tenants" TO "service_role";

GRANT DELETE ON TABLE "public"."due_notes" TO "anon";

GRANT INSERT ON TABLE "public"."due_notes" TO "anon";

GRANT REFERENCES ON TABLE "public"."due_notes" TO "anon";

GRANT SELECT ON TABLE "public"."due_notes" TO "anon";

GRANT TRIGGER ON TABLE "public"."due_notes" TO "anon";

GRANT TRUNCATE ON TABLE "public"."due_notes" TO "anon";

GRANT UPDATE ON TABLE "public"."due_notes" TO "anon";

GRANT DELETE ON TABLE "public"."due_notes" TO "authenticated";

GRANT INSERT ON TABLE "public"."due_notes" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."due_notes" TO "authenticated";

GRANT SELECT ON TABLE "public"."due_notes" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."due_notes" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."due_notes" TO "authenticated";

GRANT UPDATE ON TABLE "public"."due_notes" TO "authenticated";

GRANT DELETE ON TABLE "public"."due_notes" TO "service_role";

GRANT INSERT ON TABLE "public"."due_notes" TO "service_role";

GRANT REFERENCES ON TABLE "public"."due_notes" TO "service_role";

GRANT SELECT ON TABLE "public"."due_notes" TO "service_role";

GRANT TRIGGER ON TABLE "public"."due_notes" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."due_notes" TO "service_role";

GRANT UPDATE ON TABLE "public"."due_notes" TO "service_role";

GRANT DELETE ON TABLE "public"."employees" TO "anon";

GRANT INSERT ON TABLE "public"."employees" TO "anon";

GRANT REFERENCES ON TABLE "public"."employees" TO "anon";

GRANT SELECT ON TABLE "public"."employees" TO "anon";

GRANT TRIGGER ON TABLE "public"."employees" TO "anon";

GRANT TRUNCATE ON TABLE "public"."employees" TO "anon";

GRANT UPDATE ON TABLE "public"."employees" TO "anon";

GRANT DELETE ON TABLE "public"."employees" TO "authenticated";

GRANT INSERT ON TABLE "public"."employees" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."employees" TO "authenticated";

GRANT SELECT ON TABLE "public"."employees" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."employees" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."employees" TO "authenticated";

GRANT UPDATE ON TABLE "public"."employees" TO "authenticated";

GRANT DELETE ON TABLE "public"."employees" TO "service_role";

GRANT INSERT ON TABLE "public"."employees" TO "service_role";

GRANT REFERENCES ON TABLE "public"."employees" TO "service_role";

GRANT SELECT ON TABLE "public"."employees" TO "service_role";

GRANT TRIGGER ON TABLE "public"."employees" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."employees" TO "service_role";

GRANT UPDATE ON TABLE "public"."employees" TO "service_role";

GRANT DELETE ON TABLE "public"."fractions" TO "anon";

GRANT INSERT ON TABLE "public"."fractions" TO "anon";

GRANT REFERENCES ON TABLE "public"."fractions" TO "anon";

GRANT SELECT ON TABLE "public"."fractions" TO "anon";

GRANT TRIGGER ON TABLE "public"."fractions" TO "anon";

GRANT TRUNCATE ON TABLE "public"."fractions" TO "anon";

GRANT UPDATE ON TABLE "public"."fractions" TO "anon";

GRANT DELETE ON TABLE "public"."fractions" TO "authenticated";

GRANT INSERT ON TABLE "public"."fractions" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."fractions" TO "authenticated";

GRANT SELECT ON TABLE "public"."fractions" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."fractions" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."fractions" TO "authenticated";

GRANT UPDATE ON TABLE "public"."fractions" TO "authenticated";

GRANT DELETE ON TABLE "public"."fractions" TO "service_role";

GRANT INSERT ON TABLE "public"."fractions" TO "service_role";

GRANT REFERENCES ON TABLE "public"."fractions" TO "service_role";

GRANT SELECT ON TABLE "public"."fractions" TO "service_role";

GRANT TRIGGER ON TABLE "public"."fractions" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."fractions" TO "service_role";

GRANT UPDATE ON TABLE "public"."fractions" TO "service_role";

GRANT DELETE ON TABLE "public"."installment_payments" TO "anon";

GRANT INSERT ON TABLE "public"."installment_payments" TO "anon";

GRANT REFERENCES ON TABLE "public"."installment_payments" TO "anon";

GRANT SELECT ON TABLE "public"."installment_payments" TO "anon";

GRANT TRIGGER ON TABLE "public"."installment_payments" TO "anon";

GRANT TRUNCATE ON TABLE "public"."installment_payments" TO "anon";

GRANT UPDATE ON TABLE "public"."installment_payments" TO "anon";

GRANT DELETE ON TABLE "public"."installment_payments" TO "authenticated";

GRANT INSERT ON TABLE "public"."installment_payments" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."installment_payments" TO "authenticated";

GRANT SELECT ON TABLE "public"."installment_payments" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."installment_payments" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."installment_payments" TO "authenticated";

GRANT UPDATE ON TABLE "public"."installment_payments" TO "authenticated";

GRANT DELETE ON TABLE "public"."installment_payments" TO "service_role";

GRANT INSERT ON TABLE "public"."installment_payments" TO "service_role";

GRANT REFERENCES ON TABLE "public"."installment_payments" TO "service_role";

GRANT SELECT ON TABLE "public"."installment_payments" TO "service_role";

GRANT TRIGGER ON TABLE "public"."installment_payments" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."installment_payments" TO "service_role";

GRANT UPDATE ON TABLE "public"."installment_payments" TO "service_role";

GRANT DELETE ON TABLE "public"."installment_updates" TO "anon";

GRANT INSERT ON TABLE "public"."installment_updates" TO "anon";

GRANT REFERENCES ON TABLE "public"."installment_updates" TO "anon";

GRANT SELECT ON TABLE "public"."installment_updates" TO "anon";

GRANT TRIGGER ON TABLE "public"."installment_updates" TO "anon";

GRANT TRUNCATE ON TABLE "public"."installment_updates" TO "anon";

GRANT UPDATE ON TABLE "public"."installment_updates" TO "anon";

GRANT DELETE ON TABLE "public"."installment_updates" TO "authenticated";

GRANT INSERT ON TABLE "public"."installment_updates" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."installment_updates" TO "authenticated";

GRANT SELECT ON TABLE "public"."installment_updates" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."installment_updates" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."installment_updates" TO "authenticated";

GRANT UPDATE ON TABLE "public"."installment_updates" TO "authenticated";

GRANT DELETE ON TABLE "public"."installment_updates" TO "service_role";

GRANT INSERT ON TABLE "public"."installment_updates" TO "service_role";

GRANT REFERENCES ON TABLE "public"."installment_updates" TO "service_role";

GRANT SELECT ON TABLE "public"."installment_updates" TO "service_role";

GRANT TRIGGER ON TABLE "public"."installment_updates" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."installment_updates" TO "service_role";

GRANT UPDATE ON TABLE "public"."installment_updates" TO "service_role";

GRANT DELETE ON TABLE "public"."intervention_payments" TO "anon";

GRANT INSERT ON TABLE "public"."intervention_payments" TO "anon";

GRANT REFERENCES ON TABLE "public"."intervention_payments" TO "anon";

GRANT SELECT ON TABLE "public"."intervention_payments" TO "anon";

GRANT TRIGGER ON TABLE "public"."intervention_payments" TO "anon";

GRANT TRUNCATE ON TABLE "public"."intervention_payments" TO "anon";

GRANT UPDATE ON TABLE "public"."intervention_payments" TO "anon";

GRANT DELETE ON TABLE "public"."intervention_payments" TO "authenticated";

GRANT INSERT ON TABLE "public"."intervention_payments" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."intervention_payments" TO "authenticated";

GRANT SELECT ON TABLE "public"."intervention_payments" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."intervention_payments" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."intervention_payments" TO "authenticated";

GRANT UPDATE ON TABLE "public"."intervention_payments" TO "authenticated";

GRANT DELETE ON TABLE "public"."intervention_payments" TO "service_role";

GRANT INSERT ON TABLE "public"."intervention_payments" TO "service_role";

GRANT REFERENCES ON TABLE "public"."intervention_payments" TO "service_role";

GRANT SELECT ON TABLE "public"."intervention_payments" TO "service_role";

GRANT TRIGGER ON TABLE "public"."intervention_payments" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."intervention_payments" TO "service_role";

GRANT UPDATE ON TABLE "public"."intervention_payments" TO "service_role";

GRANT DELETE ON TABLE "public"."interventions" TO "anon";

GRANT INSERT ON TABLE "public"."interventions" TO "anon";

GRANT REFERENCES ON TABLE "public"."interventions" TO "anon";

GRANT SELECT ON TABLE "public"."interventions" TO "anon";

GRANT TRIGGER ON TABLE "public"."interventions" TO "anon";

GRANT TRUNCATE ON TABLE "public"."interventions" TO "anon";

GRANT UPDATE ON TABLE "public"."interventions" TO "anon";

GRANT DELETE ON TABLE "public"."interventions" TO "authenticated";

GRANT INSERT ON TABLE "public"."interventions" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."interventions" TO "authenticated";

GRANT SELECT ON TABLE "public"."interventions" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."interventions" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."interventions" TO "authenticated";

GRANT UPDATE ON TABLE "public"."interventions" TO "authenticated";

GRANT DELETE ON TABLE "public"."interventions" TO "service_role";

GRANT INSERT ON TABLE "public"."interventions" TO "service_role";

GRANT REFERENCES ON TABLE "public"."interventions" TO "service_role";

GRANT SELECT ON TABLE "public"."interventions" TO "service_role";

GRANT TRIGGER ON TABLE "public"."interventions" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."interventions" TO "service_role";

GRANT UPDATE ON TABLE "public"."interventions" TO "service_role";

GRANT DELETE ON TABLE "public"."lending_contracts" TO "anon";

GRANT INSERT ON TABLE "public"."lending_contracts" TO "anon";

GRANT REFERENCES ON TABLE "public"."lending_contracts" TO "anon";

GRANT SELECT ON TABLE "public"."lending_contracts" TO "anon";

GRANT TRIGGER ON TABLE "public"."lending_contracts" TO "anon";

GRANT TRUNCATE ON TABLE "public"."lending_contracts" TO "anon";

GRANT UPDATE ON TABLE "public"."lending_contracts" TO "anon";

GRANT DELETE ON TABLE "public"."lending_contracts" TO "authenticated";

GRANT INSERT ON TABLE "public"."lending_contracts" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."lending_contracts" TO "authenticated";

GRANT SELECT ON TABLE "public"."lending_contracts" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."lending_contracts" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."lending_contracts" TO "authenticated";

GRANT UPDATE ON TABLE "public"."lending_contracts" TO "authenticated";

GRANT DELETE ON TABLE "public"."lending_contracts" TO "service_role";

GRANT INSERT ON TABLE "public"."lending_contracts" TO "service_role";

GRANT REFERENCES ON TABLE "public"."lending_contracts" TO "service_role";

GRANT SELECT ON TABLE "public"."lending_contracts" TO "service_role";

GRANT TRIGGER ON TABLE "public"."lending_contracts" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."lending_contracts" TO "service_role";

GRANT UPDATE ON TABLE "public"."lending_contracts" TO "service_role";

GRANT DELETE ON TABLE "public"."movements" TO "anon";

GRANT INSERT ON TABLE "public"."movements" TO "anon";

GRANT REFERENCES ON TABLE "public"."movements" TO "anon";

GRANT SELECT ON TABLE "public"."movements" TO "anon";

GRANT TRIGGER ON TABLE "public"."movements" TO "anon";

GRANT TRUNCATE ON TABLE "public"."movements" TO "anon";

GRANT UPDATE ON TABLE "public"."movements" TO "anon";

GRANT DELETE ON TABLE "public"."movements" TO "authenticated";

GRANT INSERT ON TABLE "public"."movements" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."movements" TO "authenticated";

GRANT SELECT ON TABLE "public"."movements" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."movements" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."movements" TO "authenticated";

GRANT UPDATE ON TABLE "public"."movements" TO "authenticated";

GRANT DELETE ON TABLE "public"."movements" TO "service_role";

GRANT INSERT ON TABLE "public"."movements" TO "service_role";

GRANT REFERENCES ON TABLE "public"."movements" TO "service_role";

GRANT SELECT ON TABLE "public"."movements" TO "service_role";

GRANT TRIGGER ON TABLE "public"."movements" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."movements" TO "service_role";

GRANT UPDATE ON TABLE "public"."movements" TO "service_role";

GRANT DELETE ON TABLE "public"."profiles" TO "anon";

GRANT INSERT ON TABLE "public"."profiles" TO "anon";

GRANT REFERENCES ON TABLE "public"."profiles" TO "anon";

GRANT SELECT ON TABLE "public"."profiles" TO "anon";

GRANT TRIGGER ON TABLE "public"."profiles" TO "anon";

GRANT TRUNCATE ON TABLE "public"."profiles" TO "anon";

GRANT UPDATE ON TABLE "public"."profiles" TO "anon";

GRANT DELETE ON TABLE "public"."profiles" TO "authenticated";

GRANT INSERT ON TABLE "public"."profiles" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."profiles" TO "authenticated";

GRANT SELECT ON TABLE "public"."profiles" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."profiles" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."profiles" TO "authenticated";

GRANT UPDATE ON TABLE "public"."profiles" TO "authenticated";

GRANT DELETE ON TABLE "public"."profiles" TO "service_role";

GRANT INSERT ON TABLE "public"."profiles" TO "service_role";

GRANT REFERENCES ON TABLE "public"."profiles" TO "service_role";

GRANT SELECT ON TABLE "public"."profiles" TO "service_role";

GRANT TRIGGER ON TABLE "public"."profiles" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."profiles" TO "service_role";

GRANT UPDATE ON TABLE "public"."profiles" TO "service_role";

GRANT DELETE ON TABLE "public"."properties" TO "anon";

GRANT INSERT ON TABLE "public"."properties" TO "anon";

GRANT REFERENCES ON TABLE "public"."properties" TO "anon";

GRANT SELECT ON TABLE "public"."properties" TO "anon";

GRANT TRIGGER ON TABLE "public"."properties" TO "anon";

GRANT TRUNCATE ON TABLE "public"."properties" TO "anon";

GRANT UPDATE ON TABLE "public"."properties" TO "anon";

GRANT DELETE ON TABLE "public"."properties" TO "authenticated";

GRANT INSERT ON TABLE "public"."properties" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."properties" TO "authenticated";

GRANT SELECT ON TABLE "public"."properties" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."properties" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."properties" TO "authenticated";

GRANT UPDATE ON TABLE "public"."properties" TO "authenticated";

GRANT DELETE ON TABLE "public"."properties" TO "service_role";

GRANT INSERT ON TABLE "public"."properties" TO "service_role";

GRANT REFERENCES ON TABLE "public"."properties" TO "service_role";

GRANT SELECT ON TABLE "public"."properties" TO "service_role";

GRANT TRIGGER ON TABLE "public"."properties" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."properties" TO "service_role";

GRANT UPDATE ON TABLE "public"."properties" TO "service_role";

GRANT DELETE ON TABLE "public"."rent_payments" TO "anon";

GRANT INSERT ON TABLE "public"."rent_payments" TO "anon";

GRANT REFERENCES ON TABLE "public"."rent_payments" TO "anon";

GRANT SELECT ON TABLE "public"."rent_payments" TO "anon";

GRANT TRIGGER ON TABLE "public"."rent_payments" TO "anon";

GRANT TRUNCATE ON TABLE "public"."rent_payments" TO "anon";

GRANT UPDATE ON TABLE "public"."rent_payments" TO "anon";

GRANT DELETE ON TABLE "public"."rent_payments" TO "authenticated";

GRANT INSERT ON TABLE "public"."rent_payments" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."rent_payments" TO "authenticated";

GRANT SELECT ON TABLE "public"."rent_payments" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."rent_payments" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."rent_payments" TO "authenticated";

GRANT UPDATE ON TABLE "public"."rent_payments" TO "authenticated";

GRANT DELETE ON TABLE "public"."rent_payments" TO "service_role";

GRANT INSERT ON TABLE "public"."rent_payments" TO "service_role";

GRANT REFERENCES ON TABLE "public"."rent_payments" TO "service_role";

GRANT SELECT ON TABLE "public"."rent_payments" TO "service_role";

GRANT TRIGGER ON TABLE "public"."rent_payments" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."rent_payments" TO "service_role";

GRANT UPDATE ON TABLE "public"."rent_payments" TO "service_role";

GRANT DELETE ON TABLE "public"."rent_updates" TO "anon";

GRANT INSERT ON TABLE "public"."rent_updates" TO "anon";

GRANT REFERENCES ON TABLE "public"."rent_updates" TO "anon";

GRANT SELECT ON TABLE "public"."rent_updates" TO "anon";

GRANT TRIGGER ON TABLE "public"."rent_updates" TO "anon";

GRANT TRUNCATE ON TABLE "public"."rent_updates" TO "anon";

GRANT UPDATE ON TABLE "public"."rent_updates" TO "anon";

GRANT DELETE ON TABLE "public"."rent_updates" TO "authenticated";

GRANT INSERT ON TABLE "public"."rent_updates" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."rent_updates" TO "authenticated";

GRANT SELECT ON TABLE "public"."rent_updates" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."rent_updates" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."rent_updates" TO "authenticated";

GRANT UPDATE ON TABLE "public"."rent_updates" TO "authenticated";

GRANT DELETE ON TABLE "public"."rent_updates" TO "service_role";

GRANT INSERT ON TABLE "public"."rent_updates" TO "service_role";

GRANT REFERENCES ON TABLE "public"."rent_updates" TO "service_role";

GRANT SELECT ON TABLE "public"."rent_updates" TO "service_role";

GRANT TRIGGER ON TABLE "public"."rent_updates" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."rent_updates" TO "service_role";

GRANT UPDATE ON TABLE "public"."rent_updates" TO "service_role";

GRANT DELETE ON TABLE "public"."renting_contracts" TO "anon";

GRANT INSERT ON TABLE "public"."renting_contracts" TO "anon";

GRANT REFERENCES ON TABLE "public"."renting_contracts" TO "anon";

GRANT SELECT ON TABLE "public"."renting_contracts" TO "anon";

GRANT TRIGGER ON TABLE "public"."renting_contracts" TO "anon";

GRANT TRUNCATE ON TABLE "public"."renting_contracts" TO "anon";

GRANT UPDATE ON TABLE "public"."renting_contracts" TO "anon";

GRANT DELETE ON TABLE "public"."renting_contracts" TO "authenticated";

GRANT INSERT ON TABLE "public"."renting_contracts" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."renting_contracts" TO "authenticated";

GRANT SELECT ON TABLE "public"."renting_contracts" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."renting_contracts" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."renting_contracts" TO "authenticated";

GRANT UPDATE ON TABLE "public"."renting_contracts" TO "authenticated";

GRANT DELETE ON TABLE "public"."renting_contracts" TO "service_role";

GRANT INSERT ON TABLE "public"."renting_contracts" TO "service_role";

GRANT REFERENCES ON TABLE "public"."renting_contracts" TO "service_role";

GRANT SELECT ON TABLE "public"."renting_contracts" TO "service_role";

GRANT TRIGGER ON TABLE "public"."renting_contracts" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."renting_contracts" TO "service_role";

GRANT UPDATE ON TABLE "public"."renting_contracts" TO "service_role";

GRANT DELETE ON TABLE "public"."tenants" TO "anon";

GRANT INSERT ON TABLE "public"."tenants" TO "anon";

GRANT REFERENCES ON TABLE "public"."tenants" TO "anon";

GRANT SELECT ON TABLE "public"."tenants" TO "anon";

GRANT TRIGGER ON TABLE "public"."tenants" TO "anon";

GRANT TRUNCATE ON TABLE "public"."tenants" TO "anon";

GRANT UPDATE ON TABLE "public"."tenants" TO "anon";

GRANT DELETE ON TABLE "public"."tenants" TO "authenticated";

GRANT INSERT ON TABLE "public"."tenants" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."tenants" TO "authenticated";

GRANT SELECT ON TABLE "public"."tenants" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."tenants" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."tenants" TO "authenticated";

GRANT UPDATE ON TABLE "public"."tenants" TO "authenticated";

GRANT DELETE ON TABLE "public"."tenants" TO "service_role";

GRANT INSERT ON TABLE "public"."tenants" TO "service_role";

GRANT REFERENCES ON TABLE "public"."tenants" TO "service_role";

GRANT SELECT ON TABLE "public"."tenants" TO "service_role";

GRANT TRIGGER ON TABLE "public"."tenants" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."tenants" TO "service_role";

GRANT UPDATE ON TABLE "public"."tenants" TO "service_role";

GRANT DELETE ON TABLE "public"."tickets" TO "anon";

GRANT INSERT ON TABLE "public"."tickets" TO "anon";

GRANT REFERENCES ON TABLE "public"."tickets" TO "anon";

GRANT SELECT ON TABLE "public"."tickets" TO "anon";

GRANT TRIGGER ON TABLE "public"."tickets" TO "anon";

GRANT TRUNCATE ON TABLE "public"."tickets" TO "anon";

GRANT UPDATE ON TABLE "public"."tickets" TO "anon";

GRANT DELETE ON TABLE "public"."tickets" TO "authenticated";

GRANT INSERT ON TABLE "public"."tickets" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."tickets" TO "authenticated";

GRANT SELECT ON TABLE "public"."tickets" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."tickets" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."tickets" TO "authenticated";

GRANT UPDATE ON TABLE "public"."tickets" TO "authenticated";

GRANT DELETE ON TABLE "public"."tickets" TO "service_role";

GRANT INSERT ON TABLE "public"."tickets" TO "service_role";

GRANT REFERENCES ON TABLE "public"."tickets" TO "service_role";

GRANT SELECT ON TABLE "public"."tickets" TO "service_role";

GRANT TRIGGER ON TABLE "public"."tickets" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."tickets" TO "service_role";

GRANT UPDATE ON TABLE "public"."tickets" TO "service_role";

GRANT DELETE ON TABLE "public"."vendors" TO "anon";

GRANT INSERT ON TABLE "public"."vendors" TO "anon";

GRANT REFERENCES ON TABLE "public"."vendors" TO "anon";

GRANT SELECT ON TABLE "public"."vendors" TO "anon";

GRANT TRIGGER ON TABLE "public"."vendors" TO "anon";

GRANT TRUNCATE ON TABLE "public"."vendors" TO "anon";

GRANT UPDATE ON TABLE "public"."vendors" TO "anon";

GRANT DELETE ON TABLE "public"."vendors" TO "authenticated";

GRANT INSERT ON TABLE "public"."vendors" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."vendors" TO "authenticated";

GRANT SELECT ON TABLE "public"."vendors" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."vendors" TO "authenticated";

GRANT TRUNCATE ON TABLE "public"."vendors" TO "authenticated";

GRANT UPDATE ON TABLE "public"."vendors" TO "authenticated";

GRANT DELETE ON TABLE "public"."vendors" TO "service_role";

GRANT INSERT ON TABLE "public"."vendors" TO "service_role";

GRANT REFERENCES ON TABLE "public"."vendors" TO "service_role";

GRANT SELECT ON TABLE "public"."vendors" TO "service_role";

GRANT TRIGGER ON TABLE "public"."vendors" TO "service_role";

GRANT TRUNCATE ON TABLE "public"."vendors" TO "service_role";

GRANT UPDATE ON TABLE "public"."vendors" TO "service_role";

CREATE TRIGGER handle_updated_at
  BEFORE UPDATE ON public.contracts
  FOR EACH ROW
  EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER insert_contract
  INSTEAD OF INSERT ON public.contracts_view
  FOR EACH ROW
  EXECUTE FUNCTION insert_contract();

CREATE TRIGGER update_contract
  INSTEAD OF UPDATE ON public.contracts_view
  FOR EACH ROW
  EXECUTE FUNCTION update_contract();

CREATE TRIGGER insert_installment_payment
  INSTEAD OF INSERT ON public.installment_payments_view
  FOR EACH ROW
  EXECUTE FUNCTION insert_installment_payment();

CREATE TRIGGER remove_installment_payment
  INSTEAD OF DELETE ON public.installment_payments_view
  FOR EACH ROW
  EXECUTE FUNCTION remove_installment_payment();

CREATE TRIGGER insert_intervention_payment
  INSTEAD OF INSERT ON public.intervention_payments_view
  FOR EACH ROW
  EXECUTE FUNCTION insert_intervention_payment();

CREATE TRIGGER remove_intervention_payment
  INSTEAD OF DELETE ON public.intervention_payments_view
  FOR EACH ROW
  EXECUTE FUNCTION remove_intervention_payment();

CREATE TRIGGER handle_updated_at
  BEFORE UPDATE ON public.lending_contracts
  FOR EACH ROW
  EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER insert_fraction_from_property
  AFTER INSERT ON public.properties
  FOR EACH ROW
  EXECUTE FUNCTION insert_fraction_from_property();

CREATE TRIGGER update_fraction_from_property
  AFTER UPDATE ON public.properties
  FOR EACH ROW
  EXECUTE FUNCTION update_fraction_from_property();

CREATE TRIGGER insert_rent_payment
  INSTEAD OF INSERT ON public.rent_payments_view
  FOR EACH ROW
  EXECUTE FUNCTION insert_rent_payment();

CREATE TRIGGER remove_rent_payment
  INSTEAD OF DELETE ON public.rent_payments_view
  FOR EACH ROW
  EXECUTE FUNCTION remove_rent_payment();

CREATE TRIGGER handle_updated_at
  BEFORE UPDATE ON public.renting_contracts
  FOR EACH ROW
  EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user();

