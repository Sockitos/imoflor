-- =============================================
-- SCHEMA: Fractions
-- DESCRIPTION: ...
-- =============================================
-- Enums
CREATE TYPE public.fraction_type AS enum(
  'apartment',
  'store',
  'garage',
  'house',
  'terrain'
);

-- Tables
CREATE TABLE public.fractions(
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inserted_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  type fraction_type NOT NULL,
  matrix text NOT NULL,
  area double precision,
  tipology text,
  description text,
  patrimonial_value double precision,
  market_value double precision,
  address text NOT NULL,
  sold boolean NOT NULL DEFAULT FALSE,
  property_id bigint NOT NULL REFERENCES properties(id) ON DELETE CASCADE
);

-- Views
CREATE VIEW public.fractions_view AS
SELECT
  f.*,
  p.country,
  p.region,
  p.address || ' ' || f.address AS address_full,
  p.postal_code,
  p.city
FROM
  fractions f
  JOIN properties p ON f.property_id = p.id;

-- Functions
CREATE FUNCTION public.insert_fraction_from_property()
  RETURNS TRIGGER
  AS $$
BEGIN
  IF NOT NEW.is_multi_unit THEN
    INSERT INTO fractions(type, matrix, sold, area, tipology, description, conservatory, patrimonial_value, market_value, address, property_id)
      VALUES(NEW.type::fraction_type, NEW.matrix, NEW.sold, NEW.area, NEW.tipology, NEW.description, NEW.conservatory, NEW.patrimonial_value, NEW.market_value, '', NEW.id);
  END IF;
  RETURN new;
END;
$$
LANGUAGE plpgsql;

CREATE FUNCTION public.update_fraction_from_property()
  RETURNS TRIGGER
  AS $$
BEGIN
  IF NOT NEW.is_multi_unit THEN
    UPDATE
      fractions
    SET
      type = NEW.type,
      matrix = NEW.matrix,
      sold = NEW.sold,
      area = NEW.area,
      tipology = NEW.tipology,
      description = NEW.description,
      conservatory = NEW.conservatory,
      patrimonial_value = NEW.patrimonial_value,
      market_value = NEW.market_value,
      address = ''
    WHERE
      property_id = NEW.id;
  END IF;
  RETURN new;
END;
$$
LANGUAGE plpgsql;

-- Triggers
CREATE TRIGGER insert_fraction_from_property
  AFTER INSERT ON public.properties
  FOR EACH ROW
  EXECUTE PROCEDURE public.insert_fraction_from_property();

CREATE TRIGGER update_fraction_from_property
  AFTER UPDATE ON properties
  FOR EACH ROW
  EXECUTE PROCEDURE public.update_fraction_from_property();

