-- =============================================
-- SCHEMA: Interventions
-- DESCRIPTION: ...
-- =============================================
-- Enums
CREATE TYPE public.intervention_type AS enum(
  'new',
  'renovation',
  'maintenance'
);

CREATE TYPE public.intervention_status AS enum(
  'not_started',
  'in_progress',
  'completed',
  'cancelled'
);

CREATE TABLE public.interventions(
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inserted_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  type intervention_type NOT NULL,
  status intervention_status NOT NULL,
  start_date timestamp with time zone,
  end_date timestamp with time zone,
  description text NOT NULL,
  property_id bigint NOT NULL REFERENCES properties(id) ON DELETE CASCADE,
  fraction_id bigint REFERENCES fractions(id),
  ticket_id bigint REFERENCES tickets(id)
);

CREATE TABLE public.intervention_payments(
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inserted_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  intervention_id bigint NOT NULL REFERENCES interventions(id) ON DELETE CASCADE,
  movement_id bigint NOT NULL REFERENCES movements(id)
);

-- Views
CREATE VIEW public.intervention_payments_view AS
SELECT
  ip.intervention_id,
  ip.id,
  m.value,
  m.date,
  m.description
FROM
  public.intervention_payments ip
  JOIN public.movements m ON ip.movement_id = m.id;

-- Functions
CREATE FUNCTION public.insert_intervention_payment()
  RETURNS TRIGGER
  AS $$
DECLARE
  movement_id bigint;
BEGIN
  INSERT INTO movements(type, value, date, description)
    VALUES ('intervention'::movement_type, NEW.value, NEW.date, NEW.description)
  RETURNING
    id INTO movement_id;
  INSERT INTO intervention_payments(intervention, movement_id)
    VALUES (NEW.intervention_id, movement_id);
  RETURN new;
END;
$$
LANGUAGE plpgsql;

CREATE FUNCTION public.remove_intervention_payment()
  RETURNS TRIGGER
  AS $$
BEGIN
  DELETE FROM intervention_payments
  WHERE id = OLD.id;
  DELETE FROM movements
  WHERE id = OLD.movement_id;
  RETURN old;
END;
$$
LANGUAGE plpgsql;

-- Triggers
CREATE TRIGGER insert_intervention_payment
  INSTEAD OF insert ON intervention_payments_view
  FOR EACH ROW
  EXECUTE PROCEDURE public.insert_intervention_payment();

CREATE TRIGGER remove_intervention_payment
  INSTEAD OF DELETE ON intervention_payments_view
  FOR EACH ROW
  EXECUTE PROCEDURE public.remove_intervention_payment();

